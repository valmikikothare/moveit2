from __future__ import annotations

from typing import List
from moveit.core.robot_state import RobotState
import numpy as np

class JointModel:
    """
    Representation of a joint in the robot model.
    """

    def __init__(self) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def type(self) -> str: ...
    @property
    def variable_count(self) -> int: ...
    @property
    def variable_names(self) -> List[str]: ...
    @property
    def variable_bounds(self) -> List[VariableBounds]: ...

class JointModelGroup:
    """
    Representation of a group of joints that are part of a robot model.
    """

    def __init__(
        self,
        name: str,
        config: moveit.core.srdf.Model.Group,
        joint_models: List[JointModel],
        subgroups: List[JointModelGroup],
        default_states: dict,
    ) -> None: ...
    def get_joint_model(self, name: str) -> JointModel: ...
    def get_joint_model_group(self, name: str) -> JointModelGroup: ...
    def get_subgroup_names(self) -> List[str]: ...
    def get_subgroups(self) -> List[JointModelGroup]: ...
    def get_default_state(self, name: str) -> RobotState: ...
    def get_variable_default_positions(self, name: str) -> dict: ...
    def get_active_joint_models(self) -> List[JointModel]: ...
    def get_end_effector_tips(self) -> List[str]: ...
    def get_end_effector_tip(self) -> str: ...
    def get_pose_reference_frame(self) -> str: ...
    def get_fixed_links(self) -> List[str]: ...
    def get_updated_robot_state(self, robot_state: RobotState) -> None: ...
    def satisfies_position_bounds(self, robot_state: RobotState, margin: float = 0.0) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def joint_models(self) -> List[JointModel]: ...
    @property
    def link_models(self) -> List[str]: ...
    @property
    def joint_model_names(self) -> List[str]: ...
    @property
    def active_joint_model_names(self) -> List[str]: ...
    @property
    def active_joint_models_bounds(self) -> List[List[VariableBounds]]: ...
    @property
    def variable_names(self) -> List[str]: ...
    @property
    def variable_count(self) -> int: ...
    @property
    def eef_name(self) -> str: ...

class RobotModel:
    """
    Representation of a kinematic model.
    """

    def __init__(self, urdf_xml_path: str, srdf_xml_path: str) -> None: ...
    def get_joint_model_group(self, name: str) -> JointModelGroup: ...
    def get_model_info(self) -> str: ...
    def has_joint_model_group(self, name: str) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def model_frame(self) -> str: ...
    @property
    def root_joint_name(self) -> str: ...
    @property
    def joint_model_group_names(self) -> List[str]: ...
    @property
    def joint_model_groups(self) -> List[JointModelGroup]: ...
    @property
    def end_effectors(self) -> List[JointModelGroup]: ...

class VariableBounds:
    """
    The bounds for a variable of a joint.
    """

    def __init__(self) -> None: ...
    @property
    def min_position(self) -> float: ...
    @property
    def max_position(self) -> float: ...
    @property
    def position_bounded(self) -> bool: ...
    @property
    def min_velocity(self) -> float: ...
    @property
    def max_velocity(self) -> float: ...
    @property
    def velocity_bounded(self) -> bool: ...
    @property
    def min_acceleration(self) -> float: ...
    @property
    def max_acceleration(self) -> float: ...
    @property
    def acceleration_bounded(self) -> bool: ...
