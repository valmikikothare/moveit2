from typing import Any

class PlanningScene:
    current_state: Any
    name: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def allocate_collision_detector(self, collision_detector: str) -> None: ...
    def apply_collision_object(self, *args, **kwargs) -> Any: ...
    def check_collision(self, *args, **kwargs) -> Any: ...
    def check_collision_unpadded(self, *args, **kwargs) -> Any: ...
    def check_self_collision(self, *args, **kwargs) -> Any: ...
    def get_frame_transform(self, *args, **kwargs) -> Any: ...
    def is_path_valid(self, *args, **kwargs) -> Any: ...
    def is_state_colliding(self, *args, **kwargs) -> Any: ...
    def is_state_constrained(self, *args, **kwargs) -> Any: ...
    def is_state_valid(self, *args, **kwargs) -> Any: ...
    def knows_frame_transform(self, *args, **kwargs) -> Any: ...
    def process_attached_collision_object(self, *args, **kwargs) -> Any: ...
    def process_octomap(self, *args, **kwargs) -> Any: ...
    def process_planning_scene_world(self, *args, **kwargs) -> Any: ...
    def remove_all_collision_objects(self, *args, **kwargs) -> Any: ...
    def set_object_color(self, *args, **kwargs) -> Any: ...
    def save_geometry_to_file(self, file_name_and_path) -> Any: ...
    def load_geometry_from_file(self, file_name_and_path) -> Any: ...
    def set_current_state(self, *args, **kwargs) -> Any: ...
    def set_planning_scene_diff_msg(self, scene_msg) -> bool: ...
    def set_planning_scene_msg(self, scene_msg) -> bool: ...
    def __copy__(self) -> Any: ...
    def __deepcopy__(self) -> Any: ...
    @property
    def planning_frame(self) -> Any: ...
    @property
    def planning_scene_message(self) -> Any: ...
    @property
    def robot_model(self) -> Any: ...
    @property
    def transforms(self) -> Any: ...
    @property
    def allowed_collision_matrix(self) -> Any: ...
